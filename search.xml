<?xml version="1.0" encoding="utf-8"?>
<search>
  
    
    <entry>
      <title><![CDATA[Java基础]]></title>
      <url>%2F2016%2F11%2F30%2FJava%E5%9F%BA%E7%A1%80%2F</url>
      <content type="text"><![CDATA[关键字关键字概述被Java语言赋予特定含义的单词 关键字特点组成关键字的字母全部小写 关键字注意事项got和const作为保留字存在，目前并不使用 12345678910/*关键字:被Java语言赋予特定含义的单词特点:组成关键字的字母全部小写注意:保留goto和const,编辑器和IDE关键字有颜色标记*/Class KeyWord&#123; public static void main(String[] args)&#123; System.out.println("HelloWorld"); &#125;&#125; *判断关键字class HelloWorld public static void main String System 常用关键字数据类型的关键字class interface byte short int long float double char booleanvoid 数据类型值的关键字true flase null 流程控制的关键字if else switch case default while do for break contunereturn 访问权限修饰符的关键字private protected public 类、函数、变量修饰符的关键字abstract final static synchronize 类与类之间关系的关键字extends implements 建立实例引用实例判断实例的关键字new this super instanceof 异常处理的关键字try catch finally throw throws 用于包的关键字package import 标识符标识符就是给类、接口、方法、变量等起名字时候使用的字符序列 组成规则英文大小写字母、数字字符、$和_ 注意事项 不能以数字开头不能使Java中的关键字区分大小写 12345678910111213141516171819202122232425262728293031323334/*1.标识符:给类、接口、方法、变量等起名字时候使用的字符序列2.组成规则:英文字母大小写、数字字符、$和_3.注意事项:不能以数字开头不能使Java中的关键字区分大小写4.标识符常见命名规则:·建名知意class Student&#123;&#125;·包:其实是文件夹，用于把相同的类名进行区分，全部小写单级:xzy多级cn.xzy.cherry·类或者接口:一个单词:单词的首字母必须大写:Student,Dog多个单词:每个单词的首字母必须大写:HelloWorld,StudentName·方法或者变量一个单词:单词首字母小写:main,age;多个单词:从第二个单词开始，每个单词首字母大写:studentAge,showName()·常量一个单词:全部大写:PI多个单词:全部大写单词下划线隔开:MY_NAME*/class MakeNameDemo&#123; public static void main(String[] args)&#123; //正确做法 int i = 100; //int 1y = 100; //int public = 100; int Public = 100; &#125;&#125; *哪些标识符不合法 HeloWorld DataClass _983 $bS5 `class` `DataClass#` `97.1` `Hello World` 注释注释概述用于解释说明程序的文字 Java中注释分类格式单行注释://注释文字多行注释:/注释文字/文档注释:被Javadoc解析生成说明文档 1234567891011//单行注释/*多行注释多行注释不能嵌套 */class ZhushiDemo&#123; //main方法是主方法是程序入口被jvm调用 public static void main(String[] args) &#123; System.out.println("好好学习"); &#125;&#125; 注释是一个程序员必须要具有的良好编程习惯初学者编写代码可以养成习惯:先写注释在写代码因为代码仅仅是思想的一种体现形式 12345678910111213141516/*需求:写个Java程序，输出HelloWorld分析:1.写个Java程序,必须定义类2.把数据输出说明程序可以独立运行，必须定义main方法3.把数据输出必须使用输出语句实现:1.Java语言提供了一个关键字:class用来定义类，后面跟类名2.main方法格式固定3.输出语句固定*/class HelloWorld&#123; public static void main(String[] args)&#123; System.out.println("HelloWorld"); &#125;&#125; 常量常量的概述在程序执行过程中其值不能发生改变 Java常量分类字面值常量自定义常量 常量类型 ·字符串常量:双引号括起来的内容·整数常量:所有整数·小数常量:所有小数·字符常量:单引号括起来的内容·布尔常量:true和false·空常量:null 123456789101112131415161718192021222324252627282930/*常量: 在程序执行过程中，其值不发生改变分类: 字面值常量 自定义常量字面值常量 1.字符串常量:双引号括起来的内容:"hello","你好","World" 2.整数常量:所有整数:100,200 3.小数常量:所有小数:213.4,0.1 4.字符常量:单引号括起来的内容:'A','a','0' 5.布尔常量:true和false:true,false; 6.空常量:null:null */class ConstantDemo&#123; public static void main(String[] args) &#123; //字符串输出 System.out.println("你好"); //整数常量 System.out.println(111); //小数常量 System.out.println(1.1); //字符常量 System.out.println('a'); //布尔常量 System.out.println(true); System.out.println(false); &#125;&#125; Java针对整数常量提供了四种表现形式二进制、八进制、十进制、十六进制 进制概述进制就是位进制，是一种规定好的进位方法。X进制表示逢X进一位。 不同进制的数据组成 ·二进制:由0,1组成，以0b开头·八进制:由0,1..7组成，以0开头·十进制:由0,1..9组成，整数默认十进制·十六进制:由0,1..9,abcdef(大小写均可)，以0x开头 进制转换：略。有符号的数据表示法在计算机内，有符号数有三种表示法，原码，反码，补码。所有数据运算都是采用补码进行的 原码: 就是二进制定点表示法，即最高位为符号位，0表示正，1表示负，其余位表示数值大小 反码: 正数的反码与其原码相同；负数的反码是对其原码逐位取反，但符号位除外 补码:正数的补码与其原码相同：负数的补码是在其反码的末尾加1 已知某数X的原码为10110100B求反码和补码。11001011 11001100 已知某数X的补码11101110B，求原码。 10010010 变量变量概述在执行过程中，在某个范围内，其值可以发生改变的量，可以想成未知数 变量定义格式数据类型 变量名 = 初始化值注意:格式是固定的1.从本质上来讲，变量是内存中的一小块区域使用变量名来访问这块区域，因此每一个变量使用前必须先声明。然后进行赋值，才能够使用。2.定义变量是为了不断存放同一类型的常量，并可以重复使用。 数据类型 基本数据类型(字符型(char),布尔型(boolean),数值型(整数类型(byte,short,int.long),浮点类型(float,double))) 引用数据类型(类(class),接口(interface),数组([])) 类型 占用存储空间 范围 byte 1字节 -128~127 short 2字节 -2^15~2^15-1 int 4字节 -2^31~2^31-1 long 8字节 -2^53~2^53-1 float 4字节 -3.403E38~3.403E38 double 8字节 -1.798E308~1.798E308 整数默认int,小数默认double,长整型后缀用大L标记 使用变量注意事项 ·作用于：变量定义在哪一级的大括号中，哪个大括号的范围就是这个变量的作用域，相同作用域中不能定义两个同名变量·初始化值:没有初始化值不能使用·在一行上建议只定义一个变量，可以定义多个，但是不建议 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748/*数据类型:Java是一种强类型语言，针对每一种数据类型都明确了数据类型。数据类型分类: 基本数据类型 引用数据类型(类，接口，数值)基本数据类型:4类8种 整数 占用字节数 byte 1字节 short 2字节 int 4字节 long 8字节 浮点数 float 4字节 double 8字节 字符 char 2字节 布尔 boolean 1字节 整数默认int,小数默认double,长整型后缀用大L标记,单精度使用后缀F */class DataTypeDemo &#123; public static void main(String[] args) &#123; //定义变量的格式: //数据类型 变量名 = 初始化值 //定义一个字节变量 byte b = 10 System.out.println(b); //定义一个短整型变量 short a = 20 System.out.println(a); //定义一个整型变量 int ab = 100; System.out.println(ab); //定义一个长整型变量 long abc = 1000000000L; System.out.println(abc); //定义浮点数变量 float f = 12.234F; System.out.println(abc); //定义字符变量 char ch = 'a'; System.out.println(ch); //定义布尔变量 boolean flag = true; System.out.println(flag); &#125;&#125; 123456789101112131415161718192021222324252627/*使用变量的时候要注意的问题: 作用域： 变量定义在哪一级的大括号中，哪个大括号的范围就是这个变量的作用域，相同作用域中不能定义两个同名变量 初始化值 没有初始化值不能使用 在使用前给值就行，不一定非要在定义的时候立即给值 在一行上建议只定义一个变量，可以定义多个，但是不建议 */class DataTypeDemo2&#123; public static void main(String[] args) &#123; //定义变量 int x = 100; //错误，不能同名 int x = 200; //错误 必须初始化值 //int y; //System.out.println(y); int z; z = 200; System.out.println(z); int a = 10;int b = 20;int c = 20;//可以但不建议 int e,d; &#125;&#125; +是一个运算符，做数据的加法 boolean类型不能转换为其他的数据类型 默认转换: byte,short,char--int--long--float--double byte,short,char相互之间不转换，参与运算首先转换为int 强制转换:从大到小 目标类型 变量名 = (目标类型)(被转换的数据) 1234567891011121314151617181920212223242526/* +是一个运算符，做数据的加法 一般来说，运算的时候要求参与的数据类型必须一致 boolean类型不能转换为其他的数据类型 默认转换: byte,short,char--int--long--float--double byte,short,char相互之间不转换，参与运算首先转换为int 强制转换: 目标类型 变量名 = (目标类型)(被转换的数据) 注意: 不要随意使用强制转换，隐含了损失精度问题 */class DataTypeDemo3&#123; public static void main(String[] args) &#123; //两个int类型相加 System.out.println(3 + 4); //定义一个byte和int做加法 byte a = 3; int b = 3; int c = a + b; byte c = a + b;//损失精度报错 byte c = (byte)(a + b);//强制转换 &#125;&#125; 12345678910111213141516/* 思考题:问题？ double d = 12.345; float f = d; */class DataTypeDemo5 &#123; public static void main(String[] args) &#123; //double赋值给float,加强制转换 double d = 12.345; float f = (float)d; //看看下面两个定义的区别? float f1 = (float)12.345;//通过double强制转换，不建议 float f2 = 12.345F; &#125;&#125; 1234567891011121314/* 面试题 byte b1 = 3,b2 = 4,b; b = b1 + b2; b = 3 + 4; 哪一句编译失败 */class DataTypeDemo5&#123; public static void main(String[] args) &#123; byte b1 = 3,b2 = 4,b; b = b1 + b2;//损失精度，类型提升，编译出错 b = 3 + 4;//正确，常量计算看是否在范围内，如果不在就报错 &#125;&#125; 12345678910111213/*看程序写结果 记住3个值 'a' = 97; 'A' = 65; '0' = 48; */class DataTypeDemo8 &#123; public static void main(String[] args) &#123; System.out.println('a'); System.out.println('a' + 1);//'a' = 97 &#125;&#125; 12345678910/*看程序写结果 字符串数据和其他数据做+，结果是字符串类型这里的加是字符串连接符 */class DataTypeDemo7 &#123; public static void main(String[] args) &#123; System.out.println("hello"+'a'+1); //helloa1 System.out.println('a' + 1 + "hello");//98hello &#125;&#125; 数据类型中补充的小问题1.在定义Long和Float类型变量的时候，要加L和F 整数默认int类型，浮点数默认double类型 byte,short在定义的时候接受的是一个int类型的值,不过不在范围内,就报错 2.byte b1 = 127; byte b2 = (byte)127; //127 byte b3 = (byte)128; //-128 byte b4 = (byte)128; //-127 byte范围: -128 ~ 127 3.数据类型转换至默认转换 byte,short,char --int --long --flout --double 整数和浮点数的底层存储结构不同 运算符语句函数数组]]></content>
    </entry>

    
  
  
</search>
